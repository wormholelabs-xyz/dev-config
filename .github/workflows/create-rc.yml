name: Create RC Branch & Release Candidate

on:
  workflow_dispatch:
    inputs:
      source_tag:
        description: "Source tag/commit (e.g., v1.0.0-development.5) - leave empty to auto-select latest"
        required: false
        type: string
      recent_tag_selection:
        description: "Source selection method"
        required: false
        type: choice
        options:
          - "Use custom tag/commit above"
          - "Auto-select latest development release"
        default: "Auto-select latest development release"

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  fetch-development-releases:
    name: Fetch Recent Development Releases
    runs-on: ubuntu-latest
    if: github.event.inputs.recent_tag_selection == 'Auto-select latest development release'
    outputs:
      development_tags: ${{ steps.get-tags.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Recent Development Tags
        id: get-tags
        run: |
          echo "🔍 Fetching recent development releases..."

          # Get all tags, filter for development releases, sort by version, take latest 10
          TAGS=$(git tag -l | grep -E '.*-development\.[0-9]+$' | sort -V | tail -10 | tac)

          if [ -z "$TAGS" ]; then
            echo "❌ No development releases found"
            echo "tags=" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "📋 Found development releases:"
          echo "$TAGS"

          # Convert to JSON array for workflow dispatch
          JSON_TAGS=$(echo "$TAGS" | jq -R -s -c 'split("\n")[:-1]')
          echo "tags=$JSON_TAGS" >> $GITHUB_OUTPUT

  determine-version-and-create-branch:
    name: Determine Next Version and Create RC Branch
    runs-on: ubuntu-latest
    needs: [fetch-development-releases]
    if: always() && !failure()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Determine Source Reference and Next Version
        id: determine-source
        run: |
          CUSTOM_TAG="${{ github.event.inputs.source_tag }}"
          SELECTION_MODE="${{ github.event.inputs.recent_tag_selection }}"

          if [[ "$SELECTION_MODE" == "Use custom tag/commit above" && -n "$CUSTOM_TAG" ]]; then
            # Use custom tag/commit
            echo "🎯 Using custom reference: $CUSTOM_TAG"
            
            # Verify the reference exists
            if ! git rev-parse --verify "$CUSTOM_TAG" >/dev/null 2>&1; then
              echo "❌ Reference '$CUSTOM_TAG' not found"
              exit 1
            fi
            
            SOURCE_REF="$CUSTOM_TAG"
          else
            # Use latest development release
            echo "🔍 Finding latest development release..."
            LATEST_DEV=$(git tag -l | grep -E '.*-development\.[0-9]+$' | sort -V | tail -1)
            
            if [ -z "$LATEST_DEV" ]; then
              echo "❌ No development releases found"
              exit 1
            fi
            
            echo "🎯 Using latest development release: $LATEST_DEV"
            SOURCE_REF="$LATEST_DEV"
          fi

          echo "source_ref=$SOURCE_REF" >> $GITHUB_OUTPUT

          # Checkout the source reference to analyze commits
          git checkout "$SOURCE_REF"

          # Determine next version using semantic-release with main branch override
          echo "🔍 Determining next release version..."
          SEMANTIC_OUTPUT=$(npx semantic-release --dry-run --branches main 2>&1 || true)

          # Extract version from semantic-release output
          TARGET_VERSION=$(echo "$SEMANTIC_OUTPUT" | grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' | head -1)

          if [ -z "$TARGET_VERSION" ]; then
            echo "❌ Could not determine next version from semantic-release"
            echo "Semantic-release output:"
            echo "$SEMANTIC_OUTPUT"
            exit 1
          fi

          echo "✅ Next release version will be: $TARGET_VERSION"
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "rc_branch=rc/$TARGET_VERSION" >> $GITHUB_OUTPUT

      - name: Create RC Branch
        id: create-branch
        run: |
          SOURCE_REF="${{ steps.determine-source.outputs.source_ref }}"
          RC_BRANCH="${{ steps.determine-source.outputs.rc_branch }}"

          echo "🌿 Creating RC branch: $RC_BRANCH from $SOURCE_REF"

          # Check if branch already exists
          if git ls-remote --heads origin "$RC_BRANCH" | grep -q "$RC_BRANCH"; then
            echo "❌ RC branch $RC_BRANCH already exists"
            echo "🔍 You can either:"
            echo "   - Delete the existing branch first"
            echo "   - Run the workflow again (semantic-release will auto-increment)"
            exit 1
          fi

          # Create and push the branch
          git checkout -b "$RC_BRANCH" "$SOURCE_REF"
          git push origin "$RC_BRANCH"

          echo "✅ Successfully created and pushed $RC_BRANCH"
          echo "branch_created=true" >> $GITHUB_OUTPUT

      - name: Create Summary
        run: |
          SOURCE_REF="${{ steps.determine-source.outputs.source_ref }}"
          RC_BRANCH="${{ steps.determine-source.outputs.rc_branch }}"
          TARGET_VERSION="${{ steps.determine-source.outputs.target_version }}"

          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🎉 RC Branch Created Successfully

          ### Branch Details
          - **RC Branch**: \`$RC_BRANCH\`
          - **Source Reference**: \`$SOURCE_REF\`
          - **Target Version**: \`$TARGET_VERSION\` (auto-determined)

          ### Next Steps
          1. ✅ RC branch has been created and pushed
          2. 🚀 **Release Candidate workflow will automatically trigger**
          3. 📦 RC will be published to npm with \`@rc\` tag
          4. 🧪 Test the RC: \`npm install @wormhole-labs/dev-config@rc\`
          5. 🔄 When ready, trigger final release from RC branch

          ### Automatic Actions
          - The **Production Release** workflow will trigger automatically when the branch is pushed
          - This will create a Release Candidate (\`$TARGET_VERSION-rc.1\`)
          - **No approvals needed** for RC creation
          - RC will be available at: \`@wormhole-labs/dev-config@rc\`

          ### Manual Actions Required Later
          - **2 developer approvals** will be required for final stable release
          EOF
