name: Production Release

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: "Commit SHA from main branch to release (leave empty for latest main)"
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Validate workflow trigger
        run: |
          echo "üîí Security Check: Validating workflow trigger"
          if [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "‚ùå Only manual workflow dispatch allowed for production releases"
            exit 1
          fi

      - name: Create audit log
        run: |
          mkdir -p audit-logs
          cat > audit-logs/attempt-$(date +%Y%m%d-%H%M%S).json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "actor": "${{ github.actor }}",
            "event": "${{ github.event_name }}",
            "branch": "${{ github.ref }}",
            "commit": "${{ github.sha }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}"
          }
          EOF

      - name: Upload audit log
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_id }}
          path: audit-logs/
          retention-days: 90

  merge-and-release:
    needs: security-check
    name: Merge to Release Branch and Create Release
    runs-on: ubuntu-latest
    environment: production # Requires 2 approvals
    outputs:
      release_created: ${{ steps.release.outputs.new_release_published }}
      tag_name: ${{ steps.release.outputs.new_release_git_tag }}
      version: ${{ steps.release.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Source Commit
        id: determine-commit
        run: |
          COMMIT_SHA="${{ github.event.inputs.commit_sha }}"

          if [[ -n "$COMMIT_SHA" ]]; then
            echo "üéØ Using specified commit: $COMMIT_SHA"
            # Verify the commit exists
            if ! git rev-parse --verify "$COMMIT_SHA" >/dev/null 2>&1; then
              echo "‚ùå Commit '$COMMIT_SHA' not found"
              exit 1
            fi
            SOURCE_COMMIT="$COMMIT_SHA"
          else
            echo "üîç Using latest commit from main"
            git fetch origin main
            SOURCE_COMMIT=$(git rev-parse origin/main)
          fi

          echo "source_commit=$SOURCE_COMMIT" >> $GITHUB_OUTPUT
          echo "‚úÖ Source commit: $SOURCE_COMMIT"

      - name: Create/Update Release Branch
        run: |
          SOURCE_COMMIT="${{ steps.determine-commit.outputs.source_commit }}"

          # Check if release branch exists
          if git ls-remote --heads origin release >/dev/null 2>&1; then
            echo "üîÑ Release branch exists, updating it"
            git checkout release
            git reset --hard "$SOURCE_COMMIT"
          else
            echo "üåø Creating new release branch"
            git checkout -b release "$SOURCE_COMMIT"
          fi

          # Force push to update release branch
          git push origin release --force
          echo "‚úÖ Release branch updated with commit $SOURCE_COMMIT"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm build

      - name: Audit signatures
        run: npm audit signatures

      - name: Create Stable Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          # Copy stable release config that includes verified-git-commit for changelog commits
          cp .github/release-configs/releaserc.stable.json .releaserc.json
          # Run semantic-release - this will create changelog, commit it, tag, and publish
          npx semantic-release

      - name: Create PR to merge changelog to main
        if: steps.release.outputs.new_release_published == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ github.ref_name }}';
            const version = '${{ steps.release.outputs.new_release_version }}';

            try {
              // Create PR to merge changelog back to main
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `chore: merge changelog for v${version} to main`,
                head: branchName,
                base: 'main',
                body: `## üìù Changelog Update for v${version}

            This PR merges the updated CHANGELOG.md from the stable release back to the main branch.

            ### What's included:
            - ‚úÖ Updated CHANGELOG.md with release notes for v${version}
            - ‚úÖ No other changes - changelog only

            ### Release Details:
            - **Version**: v${version}
            - **Release Branch**: ${branchName}
            - **Release Type**: Stable Release

            This PR is automatically created after a successful stable release to ensure the main branch stays up-to-date with release history.

            ü§ñ Generated automatically by semantic-release workflow.`,
                draft: false
              });
              
              console.log(`‚úÖ Created PR #${pr.data.number}: ${pr.data.html_url}`);
              
              // Add labels to the PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['changelog', 'automated', 'release']
              });
              
            } catch (error) {
              console.error('‚ùå Failed to create PR:', error.message);
              // Don't fail the workflow if PR creation fails
            }

      - name: Create PR to merge changelog to main
        if: steps.release.outputs.new_release_published == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.release.outputs.new_release_version }}';

            try {
              // Create PR to merge changelog back to main
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `chore: merge changelog for v${version} to main`,
                head: 'release',
                base: 'main',
                body: `## üìù Changelog Update for v${version}

            This PR merges the updated CHANGELOG.md from the stable release back to the main branch.

            ### What's included:
            - ‚úÖ Updated CHANGELOG.md with release notes for v${version}
            - ‚úÖ No other changes - changelog only

            ### Release Details:
            - **Version**: v${version}
            - **Release Branch**: release
            - **Release Type**: Stable Release

            This PR is automatically created after a successful stable release to ensure the main branch stays up-to-date with release history.

            ü§ñ Generated automatically by semantic-release workflow.`,
                draft: false
              });
              
              console.log(`‚úÖ Created PR #${pr.data.number}: ${pr.data.html_url}`);
              
              // Add labels to the PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['changelog', 'automated', 'release']
              });
              
            } catch (error) {
              console.error('‚ùå Failed to create PR:', error.message);
              // Don't fail the workflow if PR creation fails
            }

  security-audit:
    name: Post-Release Security Audit
    needs: [merge-and-release]
    if: always() && needs.merge-and-release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.merge-and-release.outputs.tag_name }}

      - name: Audit Release
        run: |
          echo "üìù Stable Release Audit Log"
          echo "=============================="
          echo "Release Tag: ${{ needs.merge-and-release.outputs.tag_name }}"
          echo "Version: ${{ needs.merge-and-release.outputs.version }}"
          echo "Released by: ${{ github.actor }}"
          echo "Release Time: $(date -u)"
          echo "Commit SHA: ${{ github.sha }}"

      - name: Verify NPM Package
        run: |
          sleep 30
          npm view @wormhole-labs/dev-config@${{ needs.merge-and-release.outputs.version }} version
