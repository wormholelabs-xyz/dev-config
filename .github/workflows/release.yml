name: Production Release

on:
  push:
    branches: [release/*, hotfix/*]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release"
        required: true
        type: choice
        options:
          - release
          - hotfix
        default: "release"

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  security-check:
    name: Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Validate workflow trigger
        run: |
          echo "🔒 Security Check: Validating workflow trigger"
          ALLOWED_EVENTS="push workflow_dispatch"
          if [[ ! "$ALLOWED_EVENTS" =~ "${{ github.event_name }}" ]]; then
            echo "❌ Unauthorized workflow trigger: ${{ github.event_name }}"
            exit 1
          fi

      - name: Validate branch
        if: github.event_name == 'push'
        run: |
          if [[ ! "${{ github.ref }}" =~ ^refs/heads/(release|hotfix)/ ]]; then
            echo "❌ Production releases only allowed from release/* or hotfix/* branches"
            exit 1
          fi

      - name: Create audit log
        run: |
          mkdir -p audit-logs
          cat > audit-logs/attempt-$(date +%Y%m%d-%H%M%S).json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "actor": "${{ github.actor }}",
            "event": "${{ github.event_name }}",
            "branch": "${{ github.ref }}",
            "commit": "${{ github.sha }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}"
          }
          EOF

      - name: Upload audit log
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_id }}
          path: audit-logs/
          retention-days: 90

  release:
    needs: security-check
    name: Create Production Release
    runs-on: ubuntu-latest
    environment: production # Requires 2 approvals
    outputs:
      release_created: ${{ steps.release.outputs.new_release_published }}
      tag_name: ${{ steps.release.outputs.new_release_git_tag }}
      version: ${{ steps.release.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm build

      - name: Audit signatures
        run: npm audit signatures

      - name: Create Production Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: npx semantic-release

  security-audit:
    name: Post-Release Security Audit
    needs: release
    if: needs.release.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag_name }}

      - name: Audit Release
        run: |
          echo "📝 Production Release Audit Log"
          echo "=============================="
          echo "Release Tag: ${{ needs.release.outputs.tag_name }}"
          echo "Version: ${{ needs.release.outputs.version }}"
          echo "Released by: ${{ github.actor }}"
          echo "Release Time: $(date -u)"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"

      - name: Verify NPM Package
        run: |
          sleep 30
          npm view @wormhole-labs/dev-config@${{ needs.release.outputs.version }} version
