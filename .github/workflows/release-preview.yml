name: Release Preview

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  preview-release:
    name: Preview Release Changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch full history for release-please to analyze commits
          fetch-depth: 0

      - name: Simulate Release Please (Dry Run)
        id: release-preview
        run: |
          echo "üîç Simulating Release Please analysis..."

          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous releases found, analyzing all commits"
            COMMITS=$(git log --oneline --pretty=format:"%s")
          else
            echo "Analyzing commits since $LAST_TAG"
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"%s")
          fi

          # Analyze commit types (exclude merge commits)
          FILTERED_COMMITS=$(echo "$COMMITS" | grep -v "^Merge" || echo "")
          FEAT_COUNT=$(echo "$FILTERED_COMMITS" | grep -c "^feat" 2>/dev/null || echo "0")
          FIX_COUNT=$(echo "$FILTERED_COMMITS" | grep -c "^fix" 2>/dev/null || echo "0")
          BREAKING_COUNT=$(echo "$FILTERED_COMMITS" | grep -c "!" 2>/dev/null || echo "0")

          # Ensure they're single numbers
          FEAT_COUNT=$(echo "$FEAT_COUNT" | head -1 | tr -d '\n')
          FIX_COUNT=$(echo "$FIX_COUNT" | head -1 | tr -d '\n')
          BREAKING_COUNT=$(echo "$BREAKING_COUNT" | head -1 | tr -d '\n')

          # Debug output
          echo "Debug: FEAT_COUNT='$FEAT_COUNT'"
          echo "Debug: FIX_COUNT='$FIX_COUNT'"
          echo "Debug: BREAKING_COUNT='$BREAKING_COUNT'"

          echo "feat_count=$FEAT_COUNT" >> $GITHUB_OUTPUT
          echo "fix_count=$FIX_COUNT" >> $GITHUB_OUTPUT
          echo "breaking_count=$BREAKING_COUNT" >> $GITHUB_OUTPUT

          # Determine if release would be created
          if [ "$FEAT_COUNT" -gt 0 ] || [ "$FIX_COUNT" -gt 0 ] || [ "$BREAKING_COUNT" -gt 0 ]; then
            echo "release_created=true" >> $GITHUB_OUTPUT
            
            # Calculate next version
            # Remove pre-release suffix first, then split
            BASE_VERSION=$(echo "$CURRENT_VERSION" | cut -d'-' -f1)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
            
            if [ "$BREAKING_COUNT" -gt 0 ]; then
              NEXT_VERSION="$((MAJOR + 1)).0.0"
              RELEASE_TYPE="major"
            elif [ "$FEAT_COUNT" -gt 0 ]; then
              NEXT_VERSION="$MAJOR.$((MINOR + 1)).0"
              RELEASE_TYPE="minor"
            else
              NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              RELEASE_TYPE="patch"
            fi
            
            echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=v$NEXT_VERSION" >> $GITHUB_OUTPUT
            echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
            
            # Generate changelog body
            cat > /tmp/changelog.md << EOF
          ## [$NEXT_VERSION] - $(date +%Y-%m-%d)
          EOF
            
            if [ "$BREAKING_COUNT" -gt 0 ]; then
              echo "" >> /tmp/changelog.md
              echo "### üí• BREAKING CHANGES" >> /tmp/changelog.md
              echo "" >> /tmp/changelog.md
              echo "$FILTERED_COMMITS" | grep "!" | sed 's/^/- /' >> /tmp/changelog.md
            fi
            
            if [ "$FEAT_COUNT" -gt 0 ]; then
              echo "" >> /tmp/changelog.md
              echo "### ‚ú® Features" >> /tmp/changelog.md
              echo "" >> /tmp/changelog.md
              echo "$FILTERED_COMMITS" | grep "^feat" | grep -v "!" | sed 's/^/- /' >> /tmp/changelog.md
            fi
            
            if [ "$FIX_COUNT" -gt 0 ]; then
              echo "" >> /tmp/changelog.md
              echo "### üêõ Bug Fixes" >> /tmp/changelog.md
              echo "" >> /tmp/changelog.md
              echo "$FILTERED_COMMITS" | grep "^fix" | sed 's/^/- /' >> /tmp/changelog.md
            fi
            
            echo "body<<EOF" >> $GITHUB_OUTPUT
            cat /tmp/changelog.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
          else
            echo "release_created=false" >> $GITHUB_OUTPUT
            echo "No conventional commits found that would trigger a release"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Test Build
        run: pnpm build

      - name: Generate Release Preview Report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Get current package.json version
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const currentVersion = packageJson.version;

            // Check if there would be a release
            const releaseData = ${{ toJSON(steps.release-preview.outputs) }};

            let reportContent = `## üìã Release Preview Report\n\n`;
            reportContent += `**Current Version:** \`${currentVersion}\`\n\n`;

            if (releaseData.release_created === 'true') {
              reportContent += `### ‚úÖ Release Would Be Created\n\n`;
              reportContent += `- **New Version:** \`${releaseData.version || 'unknown'}\`\n`;
              reportContent += `- **Tag:** \`${releaseData.tag_name || 'unknown'}\`\n\n`;
              
              if (releaseData.body) {
                reportContent += `### üìù Generated Changelog\n\n`;
                reportContent += releaseData.body;
              }
            } else {
              reportContent += `### ‚ÑπÔ∏è No Release Would Be Created\n\n`;
              reportContent += `No conventional commits found that would trigger a release.\n\n`;
              reportContent += `**To trigger a release, include commits with these prefixes:**\n`;
              reportContent += `- \`feat:\` - New features (minor version bump)\n`;
              reportContent += `- \`fix:\` - Bug fixes (patch version bump)\n`;
              reportContent += `- \`feat!:\` or \`BREAKING CHANGE:\` - Breaking changes (major version bump)\n`;
            }

            reportContent += `\n---\n\n`;
            reportContent += `### üîç Commit Analysis\n\n`;
            reportContent += `This preview analyzes commits since the last release to determine:\n`;
            reportContent += `- Whether a new release should be created\n`;
            reportContent += `- What version number it should have\n`;
            reportContent += `- What changelog entries would be generated\n\n`;
            reportContent += `**Note:** This is a preview only. No actual release or npm publish will occur.\n`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Release Preview Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: reportContent
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reportContent
              });
            }

      - name: Validate Package Integrity
        run: |
          echo "üîç Validating package integrity..."

          # Test that package.json is valid
          node -e "console.log('‚úÖ package.json is valid JSON')"

          # Verify all config files exist and are valid
          echo "üìã Checking configuration files..."
          ls -la config/

          # Test that configs can be imported (syntax check)
          echo "üß™ Testing configuration file syntax..."
          node -e "
            try {
              require('./config/eslint.config.js');
              console.log('‚úÖ ESLint config is valid');
            } catch (e) {
              console.error('‚ùå ESLint config error:', e.message);
              process.exit(1);
            }
          "

          node -e "
            try {
              require('./config/prettier.config.js');
              console.log('‚úÖ Prettier config is valid');
            } catch (e) {
              console.error('‚ùå Prettier config error:', e.message);
              process.exit(1);
            }
          "

          echo "‚úÖ All validations passed!"

      - name: Test Package Installation
        run: |
          echo "üì¶ Testing package installation..."

          # Create a test directory
          mkdir -p test-install
          cd test-install

          # Initialize a test package
          npm init -y

          # Pack the parent package
          cd ..
          npm pack --quiet

          # Install the packed package in test directory
          cd test-install
          npm install ../wormhole-labs-dev-config-*.tgz

          # Test that exports work
          node -e "
            const pkg = require('@wormhole-labs/dev-config/package.json');
            console.log('‚úÖ Package exports work, version:', pkg.version);
            
            // Test config imports
            const eslint = require('@wormhole-labs/dev-config/eslint');
            const prettier = require('@wormhole-labs/dev-config/prettier');
            console.log('‚úÖ Configuration imports work');
          "

          # Cleanup
          cd ..
          rm -rf test-install wormhole-labs-dev-config-*.tgz

          echo "‚úÖ Package installation test passed!"
