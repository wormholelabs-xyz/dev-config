name: Semantic Release Preview

on:
  pull_request:
    branches: [main, release/*, hotfix/*]
    types: [opened, synchronize, reopened, labeled, unlabeled]

permissions:
  contents: read
  pull-requests: write

jobs:
  semantic-release-preview:
    name: Preview Semantic Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Semantic Release (Dry Run)
        id: semantic-preview
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a dry-run config for semantic-release
          cat > .releaserc.preview.json << EOF
          {
            "dryRun": true,
            "branches": [
              "main",
              {
                "name": "release/*",
                "prerelease": "rc"
              },
              {
                "name": "hotfix/*",
                "prerelease": false
              }
            ],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator"
            ]
          }
          EOF

          # Run semantic-release in dry-run mode
          OUTPUT=$(npx semantic-release --extends .releaserc.preview.json --dry-run 2>&1 || true)
          echo "$OUTPUT"

          # Parse output for release information
          if echo "$OUTPUT" | grep -q "The next release version is"; then
            VERSION=$(echo "$OUTPUT" | grep "The next release version is" | sed 's/.*The next release version is //' | head -1)
            echo "next_version=$VERSION" >> $GITHUB_OUTPUT
            echo "release_created=true" >> $GITHUB_OUTPUT
          else
            echo "release_created=false" >> $GITHUB_OUTPUT
          fi

          # Extract release notes if available
          if echo "$OUTPUT" | grep -A 50 "Release note for version"; then
            NOTES=$(echo "$OUTPUT" | sed -n '/Release note for version/,/^$/p' | tail -n +2 | head -n -1)
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const releaseCreated = '${{ steps.semantic-preview.outputs.release_created }}';
            const nextVersion = '${{ steps.semantic-preview.outputs.next_version }}';
            const releaseNotes = `${{ steps.semantic-preview.outputs.release_notes }}`;
            const currentVersion = '0.0.0-development';
            const targetBranch = context.payload.pull_request.base.ref;

            let comment = `## ü§ñ Semantic Release Preview\n\n`;

            if (releaseCreated === 'true') {
              comment += `### ‚úÖ Release Would Be Created\n\n`;
              comment += `**Target Branch:** \`${targetBranch}\`\n`;
              comment += `**Current Version:** \`${currentVersion}\`\n`;
              comment += `**Next Version:** \`${nextVersion}\`\n\n`;
              
              if (targetBranch === 'main') {
                comment += `**Release Type:** Pre-release (\`${nextVersion}-alpha.x\`)\n`;
                comment += `**NPM Tag:** \`alpha\`\n\n`;
                comment += `‚ÑπÔ∏è This will create an automatic pre-release when merged.\n\n`;
              } else if (targetBranch.startsWith('release/')) {
                comment += `**Release Type:** Release Candidate (\`${nextVersion}-rc.x\`)\n`;
                comment += `**NPM Tag:** \`rc\`\n\n`;
                comment += `‚ö†Ô∏è Production release requires 2 approvals after merge.\n\n`;
              } else if (targetBranch.startsWith('hotfix/')) {
                comment += `**Release Type:** Hotfix (\`${nextVersion}\`)\n`;
                comment += `**NPM Tag:** \`latest\`\n\n`;
                comment += `üö® Hotfix release requires 2 approvals after merge.\n\n`;
              }
              
              if (releaseNotes.trim()) {
                comment += `### üìù Generated Release Notes\n\n`;
                comment += releaseNotes;
              }
            } else {
              comment += `### ‚ÑπÔ∏è No Release Would Be Created\n\n`;
              comment += `**Target Branch:** \`${targetBranch}\`\n\n`;
              comment += `No conventional commits found that would trigger a release.\n\n`;
              comment += `**To trigger a release, use these commit prefixes:**\n`;
              comment += `- \`feat:\` ‚Üí Minor version bump\n`;
              comment += `- \`fix:\` ‚Üí Patch version bump\n`;
              comment += `- \`feat!:\` or \`BREAKING CHANGE:\` ‚Üí Major version bump\n`;
            }

            comment += `\n---\n`;
            comment += `<sub>ü§ñ Generated by semantic-release preview</sub>`;

            // Find and update existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const existingComment = comments.find(c => 
              c.user.type === 'Bot' && c.body.includes('Semantic Release Preview')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
